version: '3.5'

services:
  nginx:
    container_name: sl-nginx
    restart: unless-stopped
    image: nginx:alpine
    depends_on:
      - php-fpm
    ports:
      - ${APP_PORT:-80}:80
    volumes:
      - ./:/app
      - ./docker/nginx/templates:/etc/nginx/templates

  php-fpm:
    container_name: sl-php-fpm
    restart: unless-stopped
    build:
      context: ./docker/php
      target: php_app
      args:
        - APP_ENV=${APP_ENV}
        - GROUP_ID=${DOCKER_GROUP_ID}
        - USER_ID=${DOCKER_USER_ID}
    depends_on:
      mysql:
        condition: service_started
      redis:
        condition: service_started
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      XDEBUG_CONFIG: "remote_host=${XDEBUG_REMOTE_HOST:-php-fpm} client_host=${XDEBUG_CLIENT_HOST:-host.docker.internal} remote_enable=1"
      PHP_IDE_CONFIG: "serverName=${PHP_IDE_CONFIG_SERVER_NAME}"
    volumes:
      - ./:/app
      - ./docker/php/conf/php.ini:/usr/local/etc/php/conf.d/docker.ini
    extra_hosts:
      - "host.docker.internal:host-gateway"

  workers:
    container_name: sl-workers
    restart: unless-stopped
    build:
      context: ./docker/php
      target: php_workers
      args:
        - GROUP_ID=${DOCKER_GROUP_ID}
        - USER_ID=${DOCKER_USER_ID}
    depends_on:
      mysql:
        condition: service_started
      redis:
        condition: service_started
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      QUEUE_TRACES_CREATING_CONNECTION: ${QUEUE_TRACES_CREATING_CONNECTION:-redis}
      QUEUE_TRACES_CREATING_NAME: ${QUEUE_TRACES_CREATING_NAME:-slogger-tracing}
      QUEUE_TRACES_CREATING_QUANTITY: ${QUEUE_TRACES_CREATING_QUANTITY:-5}
      QUEUE_TRACES_CLEANER_CONNECTION: ${QUEUE_TRACES_CLEANER_CONNECTION:-redis}
      QUEUE_TRACES_CLEANER_NAME: ${QUEUE_TRACES_CLEANER_NAME:-traces-clearing}
    ports:
      - ${OCTANE_RR_DOCKER_PORT:-10021}:${OCTANE_RR_PORT:-9020}
      - ${OCTANE_RR_GRPC_DOCKER_PORT:-10031}:${OCTANE_RR_GRPC_PORT:-9030}
    volumes:
      - ./:/app
      - ./docker/php/conf/php-workers.ini:/usr/local/etc/php/conf.d/docker.ini
      - ./docker/supervisor/conf/supervisor.conf:/etc/supervisor/conf.d/supervisord.conf
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: supervisord -n

  mysql:
    container_name: sl-mysql
    restart: unless-stopped
    image: mysql:8.0
    ports:
      - ${DB_DOCKER_PORT:-3308}:${DB_PORT:-3306}
    environment:
      MYSQL_HOST: ${DB_HOST}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      SERVICE_NAME: mysql
    volumes:
      - mysql:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}" ]
      retries: 3
      timeout: 5s

  redis:
    container_name: sl-redis
    restart: unless-stopped
    image: redis:alpine
    ports:
      - ${REDIS_DOCKER_PORT:-6379}:${REDIS_PORT:-6379}
    volumes:
      - redis:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      retries: 3
      timeout: 5s

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: sl-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: rabbitmq-diagnostics -q check_port_connectivity
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - ${RABBITMQ_DOCKER_PORT:-6672}:5672
      - ${RABBITMQ_DOCKER_ADMIN_PORT:-25672}:15672

  mongo:
    container_name: sl-mongo
    restart: unless-stopped
    image: mongo:6.0.5
    command: ["mongod", "--wiredTigerCacheSizeGB", "${MONGO_WIRED_TIGER_CACHE_SIZE_GB:-10}"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ADMIN_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ADMIN_PASSWORD}
      MONGO_ADMIN_USERNAME: ${MONGO_ADMIN_USERNAME}
      MONGO_ADMIN_PASSWORD: ${MONGO_ADMIN_PASSWORD}
    ports:
      - ${MONGO_DOCKER_PORT}:${MONGO_PORT}
    volumes:
      - ./docker/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - mongo:/data/db

  frontend:
    container_name: sl-frontend
    restart: unless-stopped
    image: node:18-alpine
    working_dir: /app
    ports:
      - ${FRONTEND_DOCKER_PORT}:3000
    volumes:
      - ./frontend:/app
      - ./storage/api/json-schemes/:/app/json-schemes
    command: [ "npm", "run", "${FRONTEND_DOCKER_COMMAND}" ]

volumes:
  mysql:
    driver: local
  redis:
    driver: local
  mongo:
    driver: local
  rabbitmq-data:
    driver: local
